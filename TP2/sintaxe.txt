%% LEX
%literals = "+-/*=()" ## a single char
%ignore = " \t\n"
%tokens = [ 'VAR','NUMBER' ]

%% FUNCTIONS
[a-zA-Z_][a-zA-Z0-9_]* return('VAR', t.value )
\d+(\.\d+)?            return('NUMBER', float(t.value) )
.                      error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",
                             t.lexer.skip(1) )
%% END 

%% YACC

%precedence = [ ('left','+','-'), ('left','*','/'), ('right','UMINUS'), ]

# symboltable : dictionary of variables
%ts = {}

%% ERS
stat_atrib : "VAR '=' exp"          { ts[t[1]] = t[3] }
stat_print : "exp"                  { print(t[1]) }
exp_plus : "exp '+' exp"          { t[0] = t[1] + t[3] }
exp_minus : "exp '-' exp"          { t[0] = t[1] - t[3] }
exp_mul : "exp '*' exp"          { t[0] = t[1] * t[3] }
exp_div : "exp '/' exp"          { t[0] = t[1] / t[3] }
exp_neg : "'-' exp %prec UMINUS" { t[0] = -t[2] }
exp_par : "'(' exp ')'"          { t[0] = t[2] }
exp_number : "NUMBER"               { t[0] = t[1] }
exp_var : "VAR"                  { t[0] = getval(t[1]) }

%% PYTHON

def p_error(t):
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")

def getval(n):
    if n not in ts: print(f"Undefined name '{n}'")
    return ts.get(n,0)

%y=yacc()
y.parse("3+4*7")

%%